{"version":3,"sources":["components/Navbar.js","components/TitleJumbotron.js","components/Wrapper.js","components/ImgItem/index.js","App.js","serviceWorker.js","index.js"],"names":["style","boxShadow","position","minHeight","zIndex","width","fontSize","Navbar","props","react_default","a","createElement","className","href","float","margin","announcement","color","score","highScore","jumboStyle","height","padding","fontFamily","overlayStyle","top","right","bottom","left","background","opacity","bgStyle","backgroundImage","backgroundSize","captionStyle","textAlign","TitleJumbotron","fontWeight","display","flexFlow","justifyContent","alignContent","overflow","Wrapper","children","ImgItem","onClick","handleClick","id","name","initialImgState","images","App","state","puppies","console","log","imgArray","_this","foundIndex","findIndex","x","clicked","handleIncorrectGuess","setState","handleCorrectGuess","currentScore","newScore","_this2","this","components_Navbar","components_TitleJumbotron","components_Wrapper","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","map","img","components_ImgItem","imgPath","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c96cb7a6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nvar style = {\r\n    boxShadow: \"0 14px 28px rgba(0,0,0,.25), 0 10px 10px rgba(0,0,0,.22)\", \r\n    position: \"fixed\", \r\n    minHeight: \"70px\", \r\n    zIndex: 99, \r\n    width: \"100%\",\r\n    fontSize: \"calc(10px + 14 * (100vw - 320px)/ 800)\"\r\n}\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark\" style={style}>\r\n            {/* <a className=\"navbar-brand\" href=\"/\" style={{fontSize: \"30px\"}}>Clicky Game</a>                \r\n            <div className=\"navbar-nav\" style={{margin: \"auto\"}}>\r\n                <div className=\"nav-item active\">\r\n                    <a className=\"nav-link active\" style={{fontSize: \"25px\"}}>Click an image to begin! <span className=\"sr-only\">(current)</span></a>\r\n                </div>                                        \r\n            </div>\r\n            <div className=\"nav-item\" style={{color: \"white\", fontSize: \"25px\"}}>\r\n                <a className=\"nav-link\">Score: 0 | Top Score: 0</a>\r\n            </div> */}\r\n            <ul className=\"navbar-nav\" style={style}>\r\n                <li className=\"nav-item\">\r\n                    <a className=\"navbar-brand\" href=\"/\" style={{fontSize: \"30px\"}}>Puppy Clicker</a>\r\n                </li>\r\n                <li className=\"navbar-item active\" style={{float: \"center\", margin: \"auto\"}}>\r\n                    <a className=\"nav-link\" style={{fontSize: \"20px\"}}>{props.announcement} <span className=\"sr-only\">(current)</span></a>\r\n                </li>\r\n                <li className=\"navbar-item\" >\r\n                    <a className=\"nav-link\" style={{color: \"white\", fontSize: \"20px\"}}>Score: {props.score} | Top Score: {props.highScore}</a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\nvar jumboStyle = {\r\n    position: \"relative\",\r\n    width: \"100%\",\r\n    height: \"400px\",\r\n    padding: 0,\r\n    fontFamily: \"'Times New Roman', Times, serif\",\r\n}\r\n\r\nvar overlayStyle = {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    zIndex: \"auto\",\r\n    background: \"black\",\r\n    opacity: 0.5\r\n};\r\n\r\nvar bgStyle = {\r\n    height: \"100%\",\r\n    backgroundImage: \"url(https://d2v9y0dukr6mq2.cloudfront.net/video/thumbnail/dHnxL5V/retro-80s-vhs-tape-video-game-intro-landscape-vector-arcade-wireframe-terrain-4k_bgfym6on__F0002.png)\",\r\n    backgroundSize: \"cover\"\r\n};\r\n\r\nvar captionStyle = {\r\n    position: \"absolute\",\r\n    top: \"40%\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    color: \"white\"\r\n};\r\n\r\nfunction TitleJumbotron() {\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron jumbotron-fluid\" style={jumboStyle}>\r\n                <div style={overlayStyle}>\r\n                </div>\r\n                <div style={bgStyle}>\r\n                </div>\r\n                <div style={captionStyle}>\r\n                    <h1 className=\"display-4\" style={{fontWeight: 800, fontSize: \"100px\"}}>Puppy Clicker</h1>\r\n                    <p className=\"lead\" style={{fontSize: \"30px\"}}>Click on a puppy to earn points, but don't click the puppy more than once!</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TitleJumbotron;","import React from \"react\";\r\n\r\nvar style = {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexFlow: \"row wrap\",\r\n    padding: \"20px\",\r\n    justifyContent: \"space-around\",\r\n    alignContent: \"flex-start\",\r\n    overflow: \"auto\"\r\n}\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\" style={style}>{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ImgItem(props) {    \r\n    return (\r\n        <div className=\"img-container\"\r\n        onClick={() => props.handleClick(props.id)}\r\n        style={props.style}\r\n        name={props.name}\r\n        ></div>\r\n    );\r\n    \r\n};\r\n\r\nexport default ImgItem;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport TitleJumbotron from \"./components/TitleJumbotron\";\nimport Wrapper from \"./components/Wrapper\";\nimport images from \"./images.json\";\nimport Imgitem from \"./components/ImgItem\";\n\nconst initialImgState = images;\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    puppies: initialImgState,\n    score: 0,\n    highScore: 0,\n    announcement: \"Click on a puppy to begin!\"\n  };\n\n  handleClick = id => {\n    console.log(id)\n    var imgArray = this.state.puppies;\n    var foundIndex = imgArray.findIndex(x => x.id === id);\n\n    if (imgArray[foundIndex].clicked === 1) {\n      this.handleIncorrectGuess();\n    } else {\n      imgArray[foundIndex].clicked = 1;\n      this.setState({ puppies: imgArray});\n      this.handleCorrectGuess();\n    };\n  };\n\n  handleCorrectGuess = () => {\n    // Update current score if it's less than high score, otherwise update both\n    if (this.state.score <= this.state.highScore) {\n      let currentScore = this.state.score;\n      let newScore = currentScore ++;\n      console.log(this.state.score, currentScore, newScore);\n      this.setState({score: newScore, announcement: \"You've guessed correctly!\"});\n    } else {\n      let currentScore = this.state.score;\n      let newScore = currentScore ++;\n      this.setState({score: newScore, highScore: newScore, announcement: \"You've guessed correctly!\"});\n    }\n  }\n\n  handleIncorrectGuess = () => {\n    // Reset current score to 0, reset image array to it's initial state\n    console.log(\"wrong guess\")\n    this.setState({score: 0, puppies: initialImgState, announcement: \"You've guessed incorrectly!\"});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n          score={this.state.score}\n          highScore={this.state.highScore}\n          announcement={this.state.announcement}\n        />\n        <TitleJumbotron />\n        <Wrapper>\n          {shuffle(this.state.puppies).map(img => (\n            <Imgitem\n              handleClick={this.handleClick}\n              style={img.imgPath}\n              key={img.id}\n              id={img.id}\n              name={img.clicked}\n             />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}